# HG changeset patch
# Parent a733c8995f539031d27bd8af87a8a0ac72b50345
nor flash patch

--- a/common/cmd_flash.c
+++ b/common/cmd_flash.c
@@ -205,7 +205,9 @@ addr_spec(char *arg1, char *arg2, ulong
 
 static int
 flash_fill_sect_ranges (ulong addr_first, ulong addr_last,
-			int *s_first, int *s_last,
+			int *s_first, int *s_last, 
+			int *bPartialStart,
+	    int *bPartialEnd,
 			int *s_count )
 {
 	flash_info_t *info;
@@ -243,13 +245,32 @@ flash_fill_sect_ranges (ulong addr_first
 				continue;
 			if (addr_last < info->start[sect])
 				continue;
-
-			if (addr_first == info->start[sect]) {
+        
+      
+			if (addr_first == info->start[sect]){
 				s_first[bank] = sect;
 			}
+
+      
+      if(addr_first > info->start[sect]){
+				  s_first[bank] = sect;
+				  if(bPartialStart){
+				  *bPartialStart = 1;	
+			  }
+		  }
+		
 			if (addr_last  == end) {
 				s_last[bank]  = sect;
 			}
+			
+			
+			if(addr_last < end && s_last[bank] == -1){
+			  	s_last[bank]  = sect;
+				  if(bPartialEnd){ 
+				  *bPartialEnd = 1;
+		  	  }
+		  }
+		  
 		}
 		if (s_first[bank] >= 0) {
 			if (s_last[bank] < 0) {
@@ -431,15 +452,37 @@ int flash_sect_erase (ulong addr_first,
 	int erased = 0;
 	int planned;
 	int rcode = 0;
-
+	int bPartialStart = 0;		// Start sector has to be erased partially
+	int bPartialEnd = 0;		// End sector has to be erased partially
+  uchar *pStartMem = NULL;
+  uchar *pEndMem = NULL;
+  int  StartMemLen = 0;
+  int  EndMemLen = 0;
+  
 	rcode = flash_fill_sect_ranges (addr_first, addr_last,
-					s_first, s_last, &planned );
+					s_first, s_last, &bPartialStart,
+			    &bPartialEnd, &planned );
 
 	if (planned && (rcode == 0)) {
-		for (bank=0,info = &flash_info[0];
+ 		for (bank=0,info = &flash_info[0];
 		     (bank < CONFIG_SYS_MAX_FLASH_BANKS) && (rcode == 0);
 		     ++bank, ++info) {
 			if (s_first[bank]>=0) {
+	     			  if(bPartialStart){
+			           StartMemLen = addr_first - info->start[s_first[bank]];
+			           pStartMem = (uchar *)calloc(StartMemLen, sizeof(char));
+			           memcpy(pStartMem, info->start[s_first[bank]], StartMemLen);
+              }
+              if(bPartialEnd){
+              	 if(info->start[s_last[bank]+1]!=0){ 
+              	 	EndMemLen =  info->start[s_last[bank]+1] - 1 - addr_last;
+              	}
+              	 else{
+              	 	EndMemLen =  info->start[0] + info->size - 1 - addr_last; /*last sector*/
+              	}	
+			           pEndMem = (uchar *)calloc(EndMemLen, sizeof(char));
+			           memcpy(pEndMem, addr_last+1 , EndMemLen);
+              }
 				erased += s_last[bank] - s_first[bank] + 1;
 				debug ("Erase Flash from 0x%08lx to 0x%08lx "
 					"in Bank # %ld ",
@@ -449,7 +492,23 @@ int flash_sect_erase (ulong addr_first,
 						info->start[s_last[bank]+1] - 1,
 					bank+1);
 				rcode = flash_erase (info, s_first[bank], s_last[bank]);
+				      if(bPartialStart){
+				      	   if(flash_write(pStartMem, (uchar *)info->start[s_first[bank]], StartMemLen)){
+				      	   	printf("write error!\n");
+				      	  }else{
+				      	   free(pStartMem);
+				      	  }
+				      }
+				      if(bPartialEnd){
+				      	   if(flash_write( pEndMem, addr_last+1, EndMemLen)){
+				      	   	printf("write error!\n");
+				      	  }else{
+				      	   free(pEndMem);
+				      	  }
+				      }
+				     
 			}
+			
 		}
 		printf ("Erased %d sectors\n", erased);
 	} else if (rcode == 0) {
@@ -657,7 +716,7 @@ int flash_sect_protect (int p, ulong add
 	int planned;
 	int rcode;
 
-	rcode = flash_fill_sect_ranges( addr_first, addr_last, s_first, s_last, &planned );
+	rcode = flash_fill_sect_ranges( addr_first, addr_last, s_first, s_last, NULL, NULL, &planned );
 
 	protected = 0;
 
--- a/drivers/mtd/cfi_flash.c
+++ b/drivers/mtd/cfi_flash.c
@@ -32,7 +32,7 @@
  */
 
 /* The DEBUG define must be before common to enable debugging */
-/* #define DEBUG	*/
+/* #define DEBUG */	
 
 #include <common.h>
 #include <asm/processor.h>
@@ -85,6 +85,22 @@ flash_info_t flash_info[CFI_MAX_FLASH_BA
 #define CONFIG_SYS_FLASH_CFI_WIDTH	FLASH_CFI_8BIT
 #endif
 
+/*
+ * Check if address fixup macros are defined, define defaults otherwise
+ */
+#ifndef FLASH_FIXUP_ADDR_8
+#define FLASH_FIXUP_ADDR_8(addr)	(addr)
+#endif
+#ifndef FLASH_FIXUP_ADDR_16
+#define FLASH_FIXUP_ADDR_16(addr)	(addr)
+#endif
+#ifndef FLASH_FIXUP_ADDR_32
+#define FLASH_FIXUP_ADDR_32(addr)	(addr)
+#endif
+#ifndef FLASH_FIXUP_ADDR_64
+#define FLASH_FIXUP_ADDR_64(addr)	(addr)
+#endif
+
 static void __flash_write8(u8 value, void *addr)
 {
 	__raw_writeb(value, addr);
@@ -264,9 +280,9 @@ static inline uchar flash_read_uchar (fl
 
 	cp = flash_map (info, 0, offset);
 #if defined(__LITTLE_ENDIAN) || defined(CONFIG_SYS_WRITE_SWAPPED_DATA)
-	retval = flash_read8(cp);
+	retval = flash_read8(FLASH_FIXUP_ADDR_8(cp));
 #else
-	retval = flash_read8(cp + info->portwidth - 1);
+	retval = flash_read8(FLASH_FIXUP_ADDR_8(cp) + info->portwidth - 1);
 #endif
 	flash_unmap (info, 0, offset, cp);
 	return retval;
@@ -280,7 +296,7 @@ static inline ushort flash_read_word (fl
 	ushort *addr, retval;
 
 	addr = flash_map (info, 0, offset);
-	retval = flash_read16 (addr);
+	retval = flash_read16 (FLASH_FIXUP_ADDR_16(addr));
 	flash_unmap (info, 0, offset, addr);
 	return retval;
 }
@@ -305,19 +321,28 @@ static ulong flash_read_long (flash_info
 	debug ("long addr is at %p info->portwidth = %d\n", addr,
 	       info->portwidth);
 	for (x = 0; x < 4 * info->portwidth; x++) {
-		debug ("addr[%x] = 0x%x\n", x, flash_read8(addr + x));
+		debug ("addr[%x] = 0x%x\n", x,
+			flash_read8(FLASH_FIXUP_ADDR_32(addr) + x));
 	}
 #endif
 #if defined(__LITTLE_ENDIAN) || defined(CONFIG_SYS_WRITE_SWAPPED_DATA)
-	retval = ((flash_read8(addr) << 16) |
-		  (flash_read8(addr + info->portwidth) << 24) |
-		  (flash_read8(addr + 2 * info->portwidth)) |
-		  (flash_read8(addr + 3 * info->portwidth) << 8));
+	retval = ((flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr) << 16) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + info->portwidth)) << 24) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + 2 * info->portwidth))) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + 3 * info->portwidth)) << 8));
 #else
-	retval = ((flash_read8(addr + 2 * info->portwidth - 1) << 24) |
-		  (flash_read8(addr + info->portwidth - 1) << 16) |
-		  (flash_read8(addr + 4 * info->portwidth - 1) << 8) |
-		  (flash_read8(addr + 3 * info->portwidth - 1)));
+	retval = ((flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + 2 * info->portwidth - 1)) << 24) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + info->portwidth - 1)) << 16) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + 4 * info->portwidth - 1)) << 8) |
+		  (flash_read8(FLASH_FIXUP_ADDR_8
+			      (addr + 3 * info->portwidth - 1))));
 #endif
 	flash_unmap(info, sect, offset, addr);
 
@@ -338,21 +363,22 @@ void flash_write_cmd (flash_info_t * inf
 	flash_make_cmd (info, cmd, &cword);
 	switch (info->portwidth) {
 	case FLASH_CFI_8BIT:
-		debug ("fwc addr %p cmd %x %x 8bit x %d bit\n", addr, cmd,
-		       cword.c, info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
-		flash_write8(cword.c, addr);
+		debug ("fwc addr %p cmd %x %x 8bit x %d bit\n",
+		       FLASH_FIXUP_ADDR_8(addr), cmd, cword.c,
+		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
+		flash_write8(cword.c, FLASH_FIXUP_ADDR_8(addr));
 		break;
 	case FLASH_CFI_16BIT:
-		debug ("fwc addr %p cmd %x %4.4x 16bit x %d bit\n", addr,
-		       cmd, cword.w,
+		debug ("fwc addr %p cmd %x %4.4x 16bit x %d bit\n",
+		       FLASH_FIXUP_ADDR_16(addr), cmd, cword.w,
 		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
-		flash_write16(cword.w, addr);
+		flash_write16(cword.w, FLASH_FIXUP_ADDR_16(addr));
 		break;
 	case FLASH_CFI_32BIT:
-		debug ("fwc addr %p cmd %x %8.8lx 32bit x %d bit\n", addr,
-		       cmd, cword.l,
+		debug ("fwc addr %p cmd %x %8.8lx 32bit x %d bit\n",
+		       FLASH_FIXUP_ADDR_32(addr), cmd, cword.l,
 		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
-		flash_write32(cword.l, addr);
+		flash_write32(cword.l, FLASH_FIXUP_ADDR_32(addr));
 		break;
 	case FLASH_CFI_64BIT:
 #ifdef DEBUG
@@ -362,11 +388,11 @@ void flash_write_cmd (flash_info_t * inf
 			print_longlong (str, cword.ll);
 
 			debug ("fwrite addr %p cmd %x %s 64 bit x %d bit\n",
-			       addr, cmd, str,
+			       FLASH_FIXUP_ADDR_64(addr), cmd, str,
 			       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
 		}
 #endif
-		flash_write64(cword.ll, addr);
+		flash_write64(cword.ll, FLASH_FIXUP_ADDR_64(addr));
 		break;
 	}
 
@@ -397,16 +423,19 @@ static int flash_isequal (flash_info_t *
 	debug ("is= cmd %x(%c) addr %p ", cmd, cmd, addr);
 	switch (info->portwidth) {
 	case FLASH_CFI_8BIT:
-		debug ("is= %x %x\n", flash_read8(addr), cword.c);
-		retval = (flash_read8(addr) == cword.c);
+		debug ("is= %x %x\n",
+		       flash_read8(FLASH_FIXUP_ADDR_8(addr)), cword.c);
+		retval = (flash_read8(FLASH_FIXUP_ADDR_8(addr)) == cword.c);
 		break;
 	case FLASH_CFI_16BIT:
-		debug ("is= %4.4x %4.4x\n", flash_read16(addr), cword.w);
-		retval = (flash_read16(addr) == cword.w);
+		debug ("is= %4.4x %4.4x\n",
+		       flash_read16(FLASH_FIXUP_ADDR_16(addr)), cword.w);
+		retval = (flash_read16(FLASH_FIXUP_ADDR_16(addr)) == cword.w);
 		break;
 	case FLASH_CFI_32BIT:
-		debug ("is= %8.8x %8.8lx\n", flash_read32(addr), cword.l);
-		retval = (flash_read32(addr) == cword.l);
+		debug ("is= %8.8x %8.8lx\n",
+		       flash_read32(FLASH_FIXUP_ADDR_32(addr)), cword.l);
+		retval = (flash_read32(FLASH_FIXUP_ADDR_32(addr)) == cword.l);
 		break;
 	case FLASH_CFI_64BIT:
 #ifdef DEBUG
@@ -414,12 +443,13 @@ static int flash_isequal (flash_info_t *
 			char str1[20];
 			char str2[20];
 
-			print_longlong (str1, flash_read64(addr));
+			print_longlong (str1, flash_read64(FLASH_FIXUP_ADDR_64
+							  (addr)));
 			print_longlong (str2, cword.ll);
 			debug ("is= %s %s\n", str1, str2);
 		}
 #endif
-		retval = (flash_read64(addr) == cword.ll);
+		retval = (flash_read64(FLASH_FIXUP_ADDR_64(addr)) == cword.ll);
 		break;
 	default:
 		retval = 0;
@@ -443,16 +473,20 @@ static int flash_isset (flash_info_t * i
 	flash_make_cmd (info, cmd, &cword);
 	switch (info->portwidth) {
 	case FLASH_CFI_8BIT:
-		retval = ((flash_read8(addr) & cword.c) == cword.c);
+		retval = ((flash_read8(FLASH_FIXUP_ADDR_8(addr))
+			    & cword.c) == cword.c);
 		break;
 	case FLASH_CFI_16BIT:
-		retval = ((flash_read16(addr) & cword.w) == cword.w);
+		retval = ((flash_read16(FLASH_FIXUP_ADDR_16(addr))
+			    & cword.w) == cword.w);
 		break;
 	case FLASH_CFI_32BIT:
-		retval = ((flash_read32(addr) & cword.l) == cword.l);
+		retval = ((flash_read32(FLASH_FIXUP_ADDR_32(addr))
+			    & cword.l) == cword.l);
 		break;
 	case FLASH_CFI_64BIT:
-		retval = ((flash_read64(addr) & cword.ll) == cword.ll);
+		retval = ((flash_read64(FLASH_FIXUP_ADDR_64(addr))
+			    & cword.ll) == cword.ll);
 		break;
 	default:
 		retval = 0;
@@ -476,17 +510,22 @@ static int flash_toggle (flash_info_t *
 	flash_make_cmd (info, cmd, &cword);
 	switch (info->portwidth) {
 	case FLASH_CFI_8BIT:
-		retval = flash_read8(addr) != flash_read8(addr);
+		retval = flash_read8(FLASH_FIXUP_ADDR_8(addr)) !=
+			 flash_read8(FLASH_FIXUP_ADDR_8(addr));
 		break;
 	case FLASH_CFI_16BIT:
-		retval = flash_read16(addr) != flash_read16(addr);
+		retval = flash_read16(FLASH_FIXUP_ADDR_16(addr)) !=
+			 flash_read16(FLASH_FIXUP_ADDR_16(addr));
 		break;
 	case FLASH_CFI_32BIT:
-		retval = flash_read32(addr) != flash_read32(addr);
+		retval = flash_read32(FLASH_FIXUP_ADDR_32(addr)) !=
+			 flash_read32(FLASH_FIXUP_ADDR_32(addr));
 		break;
 	case FLASH_CFI_64BIT:
-		retval = ( (flash_read32( addr ) != flash_read32( addr )) ||
-			   (flash_read32(addr+4) != flash_read32(addr+4)) );
+		retval = ( (flash_read32(FLASH_FIXUP_ADDR_64( addr )) !=
+			    flash_read32(FLASH_FIXUP_ADDR_64( addr ))) ||
+			   (flash_read32(FLASH_FIXUP_ADDR_64(addr+4)) !=
+			    flash_read32(FLASH_FIXUP_ADDR_64(addr+4))) );
 		break;
 	default:
 		retval = 0;
@@ -537,14 +576,10 @@ static int flash_status_check (flash_inf
 	ulong start;
 
 #if CONFIG_SYS_HZ != 1000
-	if ((ulong)CONFIG_SYS_HZ > 100000)
-		tout *= (ulong)CONFIG_SYS_HZ / 1000;  /* for a big HZ, avoid overflow */
-	else
-		tout = DIV_ROUND_UP(tout * (ulong)CONFIG_SYS_HZ, 1000);
+	tout *= CONFIG_SYS_HZ/1000;
 #endif
 
 	/* Wait for command completion */
-	reset_timer();
 	start = get_timer (0);
 	while (flash_is_busy (info, sector)) {
 		if (get_timer (start) > tout) {
@@ -606,64 +641,6 @@ static int flash_full_status_check (flas
 	return retcode;
 }
 
-static int use_flash_status_poll(flash_info_t *info)
-{
-#ifdef CONFIG_SYS_CFI_FLASH_STATUS_POLL
-	if (info->vendor == CFI_CMDSET_AMD_EXTENDED ||
-	    info->vendor == CFI_CMDSET_AMD_STANDARD)
-		return 1;
-#endif
-	return 0;
-}
-
-static int flash_status_poll(flash_info_t *info, void *src, void *dst,
-			     ulong tout, char *prompt)
-{
-#ifdef CONFIG_SYS_CFI_FLASH_STATUS_POLL
-	ulong start;
-	int ready;
-
-#if CONFIG_SYS_HZ != 1000
-	if ((ulong)CONFIG_SYS_HZ > 100000)
-		tout *= (ulong)CONFIG_SYS_HZ / 1000;  /* for a big HZ, avoid overflow */
-	else
-		tout = DIV_ROUND_UP(tout * (ulong)CONFIG_SYS_HZ, 1000);
-#endif
-
-	/* Wait for command completion */
-	reset_timer();
-	start = get_timer(0);
-	while (1) {
-		switch (info->portwidth) {
-		case FLASH_CFI_8BIT:
-			ready = flash_read8(dst) == flash_read8(src);
-			break;
-		case FLASH_CFI_16BIT:
-			ready = flash_read16(dst) == flash_read16(src);
-			break;
-		case FLASH_CFI_32BIT:
-			ready = flash_read32(dst) == flash_read32(src);
-			break;
-		case FLASH_CFI_64BIT:
-			ready = flash_read64(dst) == flash_read64(src);
-			break;
-		default:
-			ready = 0;
-			break;
-		}
-		if (ready)
-			break;
-		if (get_timer(start) > tout) {
-			printf("Flash %s timeout at address %lx data %lx\n",
-			       prompt, (ulong)dst, (ulong)flash_read8(dst));
-			return ERR_TIMOUT;
-		}
-		udelay(1);		/* also triggers watchdog */
-	}
-#endif /* CONFIG_SYS_CFI_FLASH_STATUS_POLL */
-	return ERR_OK;
-}
-
 /*-----------------------------------------------------------------------
  */
 static void flash_add_byte (flash_info_t * info, cfiword_t * cword, uchar c)
@@ -811,12 +788,7 @@ static int flash_write_cfiword (flash_in
 	if (!sect_found)
 		sect = find_sector (info, dest);
 
-	if (use_flash_status_poll(info))
-		return flash_status_poll(info, &cword, dstaddr,
-					 info->write_tout, "write");
-	else
-		return flash_full_status_check(info, sect,
-					       info->write_tout, "write");
+	return flash_full_status_check (info, sect, info->write_tout, "write");
 }
 
 #ifdef CONFIG_SYS_FLASH_USE_BUFFER_WRITE
@@ -978,15 +950,9 @@ static int flash_write_cfibuffer (flash_
 		}
 
 		flash_write_cmd (info, sector, 0, AMD_CMD_WRITE_BUFFER_CONFIRM);
-		if (use_flash_status_poll(info))
-			retcode = flash_status_poll(info, src - (1 << shift),
-						    dst - (1 << shift),
-						    info->buffer_write_tout,
-						    "buffer write");
-		else
-			retcode = flash_full_status_check(info, sector,
-							  info->buffer_write_tout,
-							  "buffer write");
+		retcode = flash_full_status_check (info, sector,
+						   info->buffer_write_tout,
+						   "buffer write");
 		break;
 
 	default:
@@ -1008,7 +974,6 @@ int flash_erase (flash_info_t * info, in
 	int rcode = 0;
 	int prot;
 	flash_sect_t sect;
-	int st;
 
 	if (info->flash_id != FLASH_MAN_CFI) {
 		puts ("Can't erase unknown flash type - aborted\n");
@@ -1072,20 +1037,10 @@ int flash_erase (flash_info_t * info, in
 				break;
 			}
 
-			if (use_flash_status_poll(info)) {
-				cfiword_t cword = (cfiword_t)0xffffffffffffffffULL;
-				void *dest;
-				dest = flash_map(info, sect, 0);
-				st = flash_status_poll(info, &cword, dest,
-						       info->erase_blk_tout, "erase");
-				flash_unmap(info, sect, 0, dest);
-			} else
-				st = flash_full_status_check(info, sect,
-							     info->erase_blk_tout,
-							     "erase");
-			if (st)
+			if (flash_full_status_check
+			    (info, sect, info->erase_blk_tout, "erase")) {
 				rcode = 1;
-			else if (flash_verbose)
+			} else if (flash_verbose)
 				putc ('.');
 		}
 	}
@@ -2062,15 +2017,15 @@ unsigned long flash_init (void)
 		}
 #endif /* CONFIG_SYS_FLASH_PROTECTION */
 	}
-
+#if 0
 	/* Monitor protection ON by default */
-#if (CONFIG_SYS_MONITOR_BASE >= CONFIG_SYS_FLASH_BASE) && \
-	(!defined(CONFIG_MONITOR_IS_IN_RAM))
+#if (CONFIG_SYS_MONITOR_BASE >= CONFIG_SYS_FLASH_BASE)
 	flash_protect (FLAG_PROTECT_SET,
 		       CONFIG_SYS_MONITOR_BASE,
 		       CONFIG_SYS_MONITOR_BASE + monitor_flash_len  - 1,
 		       flash_get_info(CONFIG_SYS_MONITOR_BASE));
 #endif
+#endif
 
 	/* Environment protection ON by default */
 #ifdef CONFIG_ENV_IS_IN_FLASH
