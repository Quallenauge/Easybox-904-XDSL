# HG changeset patch
# Parent 42ace5d3443dabc4336b7afaf64ce00e87b5f2d8
Add Lantiq SPI driver

--- /dev/null
+++ b/arch/mips/include/asm/ifx_ssc.h
@@ -0,0 +1,159 @@
+/*****************************************************************************
+ * Amazon-S uboot
+ * Copyright (c) 2008, Infineon Technologies AG, All rights reserved
+ * IFAP DC COM SD
+ *****************************************************************************/
+#ifndef __IFX_SSC_H
+#define __IFX_SSC_H
+
+/***********************************************************************/
+/*  Module      :  SSC1 register address and bits                      */
+/***********************************************************************/
+#define IFX_SPI_BASE        (0xbe100800)
+#define SPI_CLC             ((volatile u32*)(IFX_SPI_BASE+0x0000))
+#define SPI_PISEL           ((volatile u32*)(IFX_SPI_BASE+0x0004))
+#define SPI_ID              ((volatile u32*)(IFX_SPI_BASE+0x0008))
+#define SPI_CON             ((volatile u32*)(IFX_SPI_BASE+0x0010))
+#define SPI_STAT            ((volatile u32*)(IFX_SPI_BASE+0x0014))
+#define SPI_WHBSTATE        ((volatile u32*)(IFX_SPI_BASE+0x0018))
+#define SPI_TB              ((volatile u32*)(IFX_SPI_BASE+0x0020))
+#define SPI_RB              ((volatile u32*)(IFX_SPI_BASE+0x0024))
+#define SPI_RXFCON          ((volatile u32*)(IFX_SPI_BASE+0x0030))
+#define SPI_TXFCON          ((volatile u32*)(IFX_SPI_BASE+0x0034))
+#define SPI_FSTAT           ((volatile u32*)(IFX_SPI_BASE+0x0038))
+#define SPI_BRT             ((volatile u32*)(IFX_SPI_BASE+0x0040))
+#define SPI_BRSTAT          ((volatile u32*)(IFX_SPI_BASE+0x0044))
+#define SPI_SFCON           ((volatile u32*)(IFX_SPI_BASE+0x0060))
+#define SPI_SFSTAT          ((volatile u32*)(IFX_SPI_BASE+0x0064))
+#define SPI_GPOCON          ((volatile u32*)(IFX_SPI_BASE+0x0070))
+#define SPI_GPOSTAT         ((volatile u32*)(IFX_SPI_BASE+0x0074))
+#define SPI_FGPO            ((volatile u32*)(IFX_SPI_BASE+0x0078))
+#define SPI_RXREQ           ((volatile u32*)(IFX_SPI_BASE+0x0080))
+#define SPI_RXCNT           ((volatile u32*)(IFX_SPI_BASE+0x0084))
+#define SPI_DMACON          ((volatile u32*)(IFX_SPI_BASE+0x00ec))
+#define SPI_IRNEN           ((volatile u32*)(IFX_SPI_BASE+0x00f4))
+#define SPI_IRNICR          ((volatile u32*)(IFX_SPI_BASE+0x00f8))
+#define SPI_IRNCR           ((volatile u32*)(IFX_SPI_BASE+0x000c))
+
+
+/*control bits in SPI_CON*/
+#define SPI_CON_RUEN            (1 << 12)
+#define SPI_CON_TUEN            (1 << 11)
+#define SPI_CON_AEN             (1 << 10)
+#define SPI_CON_REN             (1 << 9)
+#define SPI_CON_TEN             (1 << 8)
+#define SPI_CON_LB              (1 << 7)
+#define SPI_CON_PO              (1 << 6)
+#define SPI_CON_PH              (1 << 5)
+#define SPI_CON_HB              (1 << 4)
+#define SPI_CON_BM(value)       (((( 1 << 5) - 1) & (value)) << 16)
+#define SPI_CON_RX_OFF          (1 << 1)
+#define SPI_CON_TX_OFF          (1 << 0)
+
+
+/*control bits in SPI_STAT*/
+#define SPI_STAT_EN         (1 << 0)
+#define SPI_STAT_MS         (1 << 1)
+#define SPI_STAT_BSY        (1 << 13)
+#define SPI_STAT_RUE        (1 << 12)
+#define SPI_STAT_TUE        (1 << 11)
+#define SPI_STAT_AE         (1 << 10)
+#define SPI_STAT_RE         (1 << 9)
+#define SPI_STAT_TE         (1 << 8)
+#define SPI_STAT_BC(value)  (((( 1 << 5) - 1) & (value)) << 16)
+
+/***SSC Receive FIFO Control Register***/
+#define SPI_RXFCON_RXFITL(value) (((( 1 << 6) - 1) & (value)) << 8)
+#define SPI_RXFCON_RXTMEN    (1 << 2)
+#define SPI_RXFCON_RXFLU     (1 << 1)
+#define SPI_RXFCON_RXFEN     (1 << 0)
+/***SSC Transmit FIFO Control Register***/
+#define SPI_TXFCON_RXFITL(value) (((( 1 << 6) - 1) & (value)) << 8)
+#define SPI_TXFCON_TXTMEN    (1 << 2)
+#define SPI_TXFCON_TXFLU     (1 << 1)
+#define SPI_TXFCON_TXFEN     (1 << 0)
+
+/***SSC FIFO Status Register***/
+#define SPI_FSTAT_TXFFL(value)   (((( 1 << 6) - 1) & (value)) << 8)
+#define SPI_FSTAT_RXFFL(value)   (((( 1 << 6) - 1) & (value)) << 0)
+
+
+
+#define DATA_WIDTH	         8
+#define RXFIFO_SIZE          8
+#define TXFIFO_SIZE          8
+
+#define SFLASH_BAUDRATE	     2000000
+
+enum {
+    IFX_SSC_CS1 = 0, 
+    IFX_SSC_CS2,
+    IFX_SSC_CS3,
+    IFX_SSC_CS4,
+    IFX_SSC_CS5,
+    IFX_SSC_CS6,
+    IFX_SSC_CS7,
+};
+
+static inline void
+ssc_cs_set(unsigned char bit)
+{
+    *SPI_FGPO = (1<<(bit+8));
+}
+
+static inline void ssc_cs_clr(unsigned char bit)
+{
+    *SPI_FGPO = (1<<(bit));
+}
+
+static inline void
+ssc_sync(void)
+{
+    while(((*SPI_STAT) & SPI_STAT_BSY) == SPI_STAT_BSY);
+}
+
+static inline void ssc_tx_only(void)
+{
+    ssc_sync();
+	/* change to TX only mode */
+    *SPI_CON = ((*SPI_CON) & (~SPI_CON_TX_OFF)) | SPI_CON_RX_OFF;
+}
+
+static inline void ssc_rx_only(void)
+{
+    ssc_sync();
+    /* change to RX only mode */
+    *SPI_CON = ((*SPI_CON) & (~SPI_CON_RX_OFF)) | SPI_CON_TX_OFF;
+	/* flush RX */
+	*SPI_RXFCON = (*SPI_RXFCON) | SPI_RXFCON_RXFLU;
+}
+
+static inline void ssc_tx_rx(void)
+{
+    ssc_sync();
+    /* change to TXRX */
+    *SPI_CON = ((*SPI_CON) & ~(SPI_CON_RX_OFF))| SPI_CON_TX_OFF;
+    /* flush RX */
+    *SPI_RXFCON = (*SPI_RXFCON) | SPI_RXFCON_RXFLU;
+}
+
+static inline int ssc_write(unsigned char uc_value)
+{
+    ssc_sync();
+	*SPI_TB = (u32)uc_value;
+	ssc_sync();
+	return 0;
+}
+
+static inline u8	ssc_read(void)
+{
+    ssc_sync();
+    *SPI_RXREQ = 1;
+    /* poll RIR */
+    while((SPI_FSTAT_RXFFL(*SPI_FSTAT)) == 0) { };
+	return (u8)(*SPI_RB);
+}
+	
+extern int ssc_init(u32 baudrate);
+
+#endif /* __IFX_SSC_H */
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -31,6 +31,7 @@ COBJS-$(CONFIG_ATMEL_SPI) += atmel_spi.o
 COBJS-$(CONFIG_BFIN_SPI) += bfin_spi.o
 COBJS-$(CONFIG_CF_SPI) += cf_spi.o
 COBJS-$(CONFIG_DAVINCI_SPI) += davinci_spi.o
+COBJS-$(CONFIG_LANTIQ_SPI) += lq_spi.o
 COBJS-$(CONFIG_KIRKWOOD_SPI) += kirkwood_spi.o
 COBJS-$(CONFIG_MPC52XX_SPI) += mpc52xx_spi.o
 COBJS-$(CONFIG_MPC8XXX_SPI) += mpc8xxx_spi.o
--- /dev/null
+++ b/drivers/spi/lq_spi.c
@@ -0,0 +1,214 @@
+/*
+ *  Infineon SPI interface driver
+ *  Revision history
+ *
+ *  15 May, 2009 Wu Qi Ming, Initial version
+ */
+
+#include <common.h>
+#include <spi.h>
+#include <asm/ifx_ssc.h>
+#include <malloc.h>
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+#ifdef DEBUG_SPI
+#define PRINTD(fmt,args...)	printf (fmt ,##args)
+#else
+#define PRINTD(fmt,args...)
+#endif
+/*---------------------------------------------------------------------*/
+/*                         Public Functions                            */
+/*=====================================================================*/
+
+/*-----------------------------------------------------------------------
+ * Initialization
+ */
+
+
+//extern int amazon_s_get_fpiclk(void);
+extern int spi_gpio_init(unsigned int cs);
+/*global variable*/
+struct spi_slave spi;
+unsigned int spi_baudrate;
+unsigned int spi_mode;
+
+/* Brief: initialize SSC1 module
+ * Parameter:   baudrate FPI/clock ~ FPI/clock/2^16
+  */
+int ssc_init(u32 baudrate)
+{
+   return 0;
+}
+
+static inline void
+SPI_ON(unsigned int cs)
+{
+    ssc_cs_clr(cs);
+}
+
+static inline void	SPI_OFF(unsigned int cs)
+{
+    ssc_cs_set(cs);
+}
+
+void spi_write_byte(uint8_t transmit)
+{
+    asm("sync");
+    ssc_tx_only();
+    ssc_write(transmit);
+    asm("sync");
+    return;
+}
+
+static uint8_t	spi_read_byte(void)
+{
+    ssc_rx_only();
+    return ssc_read();
+}
+									
+
+
+
+void spi_init (void)
+{
+        /* Clock Control Register */
+		/* DISS OFF and RMC = 1 */
+	    //CLC
+		*SPI_CLC = 0x0100;
+		/* Disable SSC to get access to the control bits */
+		*SPI_WHBSTATE = 0x1;
+		asm("SYNC");
+
+		/*set chip select pin*/
+		*SPI_GPOCON =1<<(spi.cs+8);
+
+        *SPI_BRT = (((F_SSC_CLK>>1) + spi_baudrate/2)/(spi_baudrate) - 1) & 0xffff;
+        /*enable and flush RX/TX FIFO*/
+        *SPI_RXFCON = 0xF03;
+	    *SPI_TXFCON = 0xF03;
+	    /* set CON, TX off , RX off, ENBV=0, BM=7(8
+	     * bit valid) HB=1(MSB first), PO=0,PH=1(SPI
+		 * Mode 0)*/
+		*SPI_CON = 0x00070033;
+		asm("SYNC");
+		/*Set Master mode and  Enable
+		 * SSC */
+        *SPI_WHBSTATE = 0xA;
+        asm("SYNC");
+}
+
+struct spi_slave *spi_setup_slave(unsigned int bus, unsigned int cs,
+		unsigned int max_hz, unsigned int mode)
+{
+    u8 tmp;
+	int i;
+	if(!spi_gpio_init(cs)) return NULL;
+    spi.bus=0;
+	spi.cs =cs;
+    spi_baudrate=max_hz;
+	spi_mode=mode;
+	spi_init();
+#if 0  
+	SPI_ON();
+    spi_write_byte(0x9f);
+	ssc_sync();
+	for(i=0;i<4;i++)
+	{
+	  tmp=spi_read_byte();
+	  printf("%02x",tmp);
+	 }
+	 SPI_OFF();
+													 
+     printf("\n");	
+#endif    
+	 return &spi;
+	
+}
+
+void spi_free_slave(struct spi_slave *slave)
+{
+}
+
+int spi_claim_bus(struct spi_slave *slave)
+{
+
+	return 0;
+}
+
+void spi_release_bus(struct spi_slave *slave)
+{
+	/* Nothing to do */
+}
+
+/*-----------------------------------------------------------------------
+ * SPI transfer
+ *
+ * This writes "bitlen" bits out the SPI MOSI port and simultaneously clocks
+ * "bitlen" bits in the SPI MISO port.  That's just the way SPI works.
+ *
+ * The source of the outgoing bits is the "dout" parameter and the
+ * destination of the input bits is the "din" parameter.  Note that "dout"
+ * and "din" can point to the same memory location, in which case the
+ * input data overwrites the output data (since both are buffered by
+ * temporary variables, this is OK).
+ */
+int  spi_xfer(struct spi_slave *slave, unsigned int bitlen,
+		const void *dout, void *din, unsigned long flags)
+{
+   u8 tmp;
+   int bytelen;
+   int ret;
+   int i;
+   ret = 0;
+   if (bitlen == 0)
+    /* Finish any previously submitted transfers */
+        goto out;
+
+    if (bitlen % 8) {
+	/* Errors always terminate an ongoing transfer */
+	    flags |= SPI_XFER_END;
+		goto out;
+	 }
+    
+	bytelen=bitlen/8;
+    if(flags & SPI_XFER_BEGIN)
+	 { 
+	   //printf("begin\n");
+	   SPI_ON(slave->cs);
+
+	 }
+	
+	for(i=0;i<bytelen;i++){
+        if(dout && !din){
+		     spi_write_byte(*(u8*)(dout+i)); 
+			 //printf("x%02x",*(u8*)(dout+i));
+			 ssc_sync();	
+			 
+	     }
+	    else if(!dout && din){
+             asm("sync");
+			 *(u8*)(din+i)=spi_read_byte();
+			 asm("sync");
+			 //printf(".%02x",*(u8*)(din+i));
+	     }
+	    else if(dout && din){
+
+	    }
+	    else{
+
+
+	    }
+    }
+out:
+    asm("sync");
+    if(flags & SPI_XFER_END){
+	  //printf("end\n");
+	  SPI_OFF(slave->cs);
+    }
+	//printf("\n");   
+					 
+	return(0);
+}
